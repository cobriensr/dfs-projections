// <auto-generated />
using System;
using FantasySports.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FantasySports.Infrastructure.Data.Migrations.CFB
{
    [DbContext(typeof(CFBDbContext))]
    partial class CFBDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("cfb")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("integer");

                    b.Property<string>("Awaypointspreadpayout")
                        .HasColumnType("text");

                    b.Property<string>("Awayrotationnumber")
                        .HasColumnType("text");

                    b.Property<string>("Awayteam")
                        .HasColumnType("text");

                    b.Property<string>("Awayteammoneyline")
                        .HasColumnType("text");

                    b.Property<string>("Awayteamname")
                        .HasColumnType("text");

                    b.Property<string>("Awayteamscore")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Day")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("integer");

                    b.Property<string>("Homepointspreadpayout")
                        .HasColumnType("text");

                    b.Property<string>("Homerotationnumber")
                        .HasColumnType("text");

                    b.Property<string>("Hometeam")
                        .HasColumnType("text");

                    b.Property<string>("Hometeammoneyline")
                        .HasColumnType("text");

                    b.Property<string>("Hometeamname")
                        .HasColumnType("text");

                    b.Property<string>("Hometeamscore")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Neutralvenue")
                        .HasColumnType("text");

                    b.Property<decimal?>("Overpayout")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Overunder")
                        .HasColumnType("numeric");

                    b.Property<int?>("Pointspread")
                        .HasColumnType("integer");

                    b.Property<int?>("Season")
                        .HasColumnType("integer");

                    b.Property<int?>("Seasontype")
                        .HasColumnType("integer");

                    b.Property<string>("Stadium")
                        .HasColumnType("text");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<decimal?>("Underpayout")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Week")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("GameId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Games_IsDeleted");

                    b.HasIndex("StadiumId");

                    b.ToTable("Games", "cfb");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<string>("Awayscore")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Homescore")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("PeriodId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Periods_IsDeleted");

                    b.ToTable("Periods", "cfb");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<string>("Class")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Firstname")
                        .HasColumnType("text");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Injurystatus")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Jersey")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Lastname")
                        .HasColumnType("text");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("Positioncategory")
                        .HasColumnType("text");

                    b.Property<string>("Team")
                        .HasColumnType("text");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Players_IsDeleted");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players", "cfb");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBPlayerGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<int?>("CFBPlayerGameId")
                        .HasColumnType("integer");

                    b.Property<int?>("CFBTeamGameId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Day")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExternalStatId")
                        .HasColumnType("integer");

                    b.Property<string>("Extrapointsattempted")
                        .HasColumnType("text");

                    b.Property<string>("Extrapointsmade")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypoints")
                        .HasColumnType("text");

                    b.Property<int?>("Fieldgoalpercentage")
                        .HasColumnType("integer");

                    b.Property<int?>("Fieldgoalsattempted")
                        .HasColumnType("integer");

                    b.Property<int?>("Fieldgoalslongestmade")
                        .HasColumnType("integer");

                    b.Property<int?>("Fieldgoalsmade")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int?>("Games")
                        .HasColumnType("integer");

                    b.Property<string>("Homeoraway")
                        .HasColumnType("text");

                    b.Property<string>("Injurystatus")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Opponent")
                        .HasColumnType("text");

                    b.Property<int>("OpponentId")
                        .HasColumnType("integer");

                    b.Property<string>("Passingattempts")
                        .HasColumnType("text");

                    b.Property<string>("Passingcompletionpercentage")
                        .HasColumnType("text");

                    b.Property<string>("Passingcompletions")
                        .HasColumnType("text");

                    b.Property<string>("Passinginterceptions")
                        .HasColumnType("text");

                    b.Property<string>("Passingrating")
                        .HasColumnType("text");

                    b.Property<string>("Passingtouchdowns")
                        .HasColumnType("text");

                    b.Property<string>("Passingyards")
                        .HasColumnType("text");

                    b.Property<string>("Passingyardsperattempt")
                        .HasColumnType("text");

                    b.Property<string>("Passingyardspercompletion")
                        .HasColumnType("text");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("Positioncategory")
                        .HasColumnType("text");

                    b.Property<string>("Receivinglong")
                        .HasColumnType("text");

                    b.Property<string>("Receivingtouchdowns")
                        .HasColumnType("text");

                    b.Property<string>("Receivingyards")
                        .HasColumnType("text");

                    b.Property<string>("Receivingyardsperreception")
                        .HasColumnType("text");

                    b.Property<string>("Receptions")
                        .HasColumnType("text");

                    b.Property<string>("Rushingattempts")
                        .HasColumnType("text");

                    b.Property<string>("Rushinglong")
                        .HasColumnType("text");

                    b.Property<string>("Rushingtouchdowns")
                        .HasColumnType("text");

                    b.Property<string>("Rushingyards")
                        .HasColumnType("text");

                    b.Property<string>("Rushingyardsperattempt")
                        .HasColumnType("text");

                    b.Property<int?>("Season")
                        .HasColumnType("integer");

                    b.Property<int?>("Seasontype")
                        .HasColumnType("integer");

                    b.Property<string>("Team")
                        .HasColumnType("text");

                    b.Property<int?>("TeamEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Week")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CFBPlayerGameId");

                    b.HasIndex("CFBTeamGameId");

                    b.HasIndex("GameId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_PlayerGames_IsDeleted");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamEntityId");

                    b.ToTable("PlayerGames", "cfb");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBPlayerGameProjection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Day")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExternalStatId")
                        .HasColumnType("integer");

                    b.Property<string>("Extrapointsattempted")
                        .HasColumnType("text");

                    b.Property<string>("Extrapointsmade")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypoints")
                        .HasColumnType("text");

                    b.Property<int?>("Fieldgoalpercentage")
                        .HasColumnType("integer");

                    b.Property<int?>("Fieldgoalsattempted")
                        .HasColumnType("integer");

                    b.Property<int?>("Fieldgoalslongestmade")
                        .HasColumnType("integer");

                    b.Property<int?>("Fieldgoalsmade")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int?>("Games")
                        .HasColumnType("integer");

                    b.Property<string>("Homeoraway")
                        .HasColumnType("text");

                    b.Property<string>("Injurystatus")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Opponent")
                        .HasColumnType("text");

                    b.Property<int>("OpponentId")
                        .HasColumnType("integer");

                    b.Property<string>("Passingattempts")
                        .HasColumnType("text");

                    b.Property<string>("Passingcompletionpercentage")
                        .HasColumnType("text");

                    b.Property<string>("Passingcompletions")
                        .HasColumnType("text");

                    b.Property<string>("Passinginterceptions")
                        .HasColumnType("text");

                    b.Property<string>("Passingrating")
                        .HasColumnType("text");

                    b.Property<string>("Passingtouchdowns")
                        .HasColumnType("text");

                    b.Property<string>("Passingyards")
                        .HasColumnType("text");

                    b.Property<string>("Passingyardsperattempt")
                        .HasColumnType("text");

                    b.Property<string>("Passingyardspercompletion")
                        .HasColumnType("text");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("Positioncategory")
                        .HasColumnType("text");

                    b.Property<string>("Receivinglong")
                        .HasColumnType("text");

                    b.Property<string>("Receivingtouchdowns")
                        .HasColumnType("text");

                    b.Property<string>("Receivingyards")
                        .HasColumnType("text");

                    b.Property<string>("Receivingyardsperreception")
                        .HasColumnType("text");

                    b.Property<string>("Receptions")
                        .HasColumnType("text");

                    b.Property<string>("Rushingattempts")
                        .HasColumnType("text");

                    b.Property<string>("Rushinglong")
                        .HasColumnType("text");

                    b.Property<string>("Rushingtouchdowns")
                        .HasColumnType("text");

                    b.Property<string>("Rushingyards")
                        .HasColumnType("text");

                    b.Property<string>("Rushingyardsperattempt")
                        .HasColumnType("text");

                    b.Property<int?>("Season")
                        .HasColumnType("integer");

                    b.Property<int?>("Seasontype")
                        .HasColumnType("integer");

                    b.Property<string>("Team")
                        .HasColumnType("text");

                    b.Property<int?>("TeamEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Week")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_PlayerGameProjections_IsDeleted");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamEntityId");

                    b.ToTable("PlayerGameProjections", "cfb");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBPlayerSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExternalStatId")
                        .HasColumnType("integer");

                    b.Property<string>("Extrapointsattempted")
                        .HasColumnType("text");

                    b.Property<string>("Extrapointsmade")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypoints")
                        .HasColumnType("text");

                    b.Property<int?>("Fieldgoalpercentage")
                        .HasColumnType("integer");

                    b.Property<int?>("Fieldgoalsattempted")
                        .HasColumnType("integer");

                    b.Property<int?>("Fieldgoalslongestmade")
                        .HasColumnType("integer");

                    b.Property<int?>("Fieldgoalsmade")
                        .HasColumnType("integer");

                    b.Property<int?>("Games")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Passingattempts")
                        .HasColumnType("text");

                    b.Property<string>("Passingcompletionpercentage")
                        .HasColumnType("text");

                    b.Property<string>("Passingcompletions")
                        .HasColumnType("text");

                    b.Property<string>("Passinginterceptions")
                        .HasColumnType("text");

                    b.Property<string>("Passingrating")
                        .HasColumnType("text");

                    b.Property<string>("Passingtouchdowns")
                        .HasColumnType("text");

                    b.Property<string>("Passingyards")
                        .HasColumnType("text");

                    b.Property<string>("Passingyardsperattempt")
                        .HasColumnType("text");

                    b.Property<string>("Passingyardspercompletion")
                        .HasColumnType("text");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("Positioncategory")
                        .HasColumnType("text");

                    b.Property<string>("Receivinglong")
                        .HasColumnType("text");

                    b.Property<string>("Receivingtouchdowns")
                        .HasColumnType("text");

                    b.Property<string>("Receivingyards")
                        .HasColumnType("text");

                    b.Property<string>("Receivingyardsperreception")
                        .HasColumnType("text");

                    b.Property<string>("Receptions")
                        .HasColumnType("text");

                    b.Property<string>("Rushingattempts")
                        .HasColumnType("text");

                    b.Property<string>("Rushinglong")
                        .HasColumnType("text");

                    b.Property<string>("Rushingtouchdowns")
                        .HasColumnType("text");

                    b.Property<string>("Rushingyards")
                        .HasColumnType("text");

                    b.Property<string>("Rushingyardsperattempt")
                        .HasColumnType("text");

                    b.Property<int?>("Season")
                        .HasColumnType("integer");

                    b.Property<int?>("Seasontype")
                        .HasColumnType("integer");

                    b.Property<string>("Team")
                        .HasColumnType("text");

                    b.Property<int?>("TeamEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_PlayerSeasons_IsDeleted");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamEntityId");

                    b.ToTable("PlayerSeasons", "cfb");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBStadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Dome")
                        .HasColumnType("boolean");

                    b.Property<string>("Geolat")
                        .HasColumnType("text");

                    b.Property<string>("Geolong")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("StadiumEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Stadiums_IsDeleted");

                    b.HasIndex("StadiumEntityId");

                    b.ToTable("Stadiums", "cfb");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Aprank")
                        .HasColumnType("text");

                    b.Property<string>("Conference")
                        .HasColumnType("text");

                    b.Property<string>("Conferenceid")
                        .HasColumnType("text");

                    b.Property<string>("Conferencelosses")
                        .HasColumnType("text");

                    b.Property<string>("Conferencewins")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Losses")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Rankseason")
                        .HasColumnType("integer");

                    b.Property<int?>("Rankseasontype")
                        .HasColumnType("integer");

                    b.Property<int?>("Rankweek")
                        .HasColumnType("integer");

                    b.Property<string>("School")
                        .HasColumnType("text");

                    b.Property<string>("Shortdisplayname")
                        .HasColumnType("text");

                    b.Property<int?>("StadiumEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer");

                    b.Property<int?>("TeamEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<string>("Teamlogourl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Teams_IsDeleted");

                    b.HasIndex("StadiumEntityId");

                    b.HasIndex("TeamEntityId");

                    b.ToTable("Teams", "cfb");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBTeamGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Day")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExternalStatId")
                        .HasColumnType("integer");

                    b.Property<string>("Extrapointsattempted")
                        .HasColumnType("text");

                    b.Property<string>("Extrapointsmade")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypoints")
                        .HasColumnType("text");

                    b.Property<int?>("Fieldgoalpercentage")
                        .HasColumnType("integer");

                    b.Property<int?>("Fieldgoalsattempted")
                        .HasColumnType("integer");

                    b.Property<int?>("Fieldgoalslongestmade")
                        .HasColumnType("integer");

                    b.Property<int?>("Fieldgoalsmade")
                        .HasColumnType("integer");

                    b.Property<string>("Firstdowns")
                        .HasColumnType("text");

                    b.Property<string>("Fourthdownattempts")
                        .HasColumnType("text");

                    b.Property<string>("Fourthdownconversions")
                        .HasColumnType("text");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int?>("Games")
                        .HasColumnType("integer");

                    b.Property<string>("Homeoraway")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Opponent")
                        .HasColumnType("text");

                    b.Property<int>("OpponentId")
                        .HasColumnType("integer");

                    b.Property<string>("Opponentscore")
                        .HasColumnType("text");

                    b.Property<string>("Passingattempts")
                        .HasColumnType("text");

                    b.Property<string>("Passingcompletionpercentage")
                        .HasColumnType("text");

                    b.Property<string>("Passingcompletions")
                        .HasColumnType("text");

                    b.Property<string>("Passinginterceptions")
                        .HasColumnType("text");

                    b.Property<string>("Passingrating")
                        .HasColumnType("text");

                    b.Property<string>("Passingtouchdowns")
                        .HasColumnType("text");

                    b.Property<string>("Passingyards")
                        .HasColumnType("text");

                    b.Property<string>("Passingyardsperattempt")
                        .HasColumnType("text");

                    b.Property<string>("Passingyardspercompletion")
                        .HasColumnType("text");

                    b.Property<string>("Penalties")
                        .HasColumnType("text");

                    b.Property<string>("Penaltyyards")
                        .HasColumnType("text");

                    b.Property<string>("Receivinglong")
                        .HasColumnType("text");

                    b.Property<string>("Receivingtouchdowns")
                        .HasColumnType("text");

                    b.Property<string>("Receivingyards")
                        .HasColumnType("text");

                    b.Property<string>("Receivingyardsperreception")
                        .HasColumnType("text");

                    b.Property<string>("Receptions")
                        .HasColumnType("text");

                    b.Property<string>("Rushingattempts")
                        .HasColumnType("text");

                    b.Property<string>("Rushinglong")
                        .HasColumnType("text");

                    b.Property<string>("Rushingtouchdowns")
                        .HasColumnType("text");

                    b.Property<string>("Rushingyards")
                        .HasColumnType("text");

                    b.Property<string>("Rushingyardsperattempt")
                        .HasColumnType("text");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.Property<int?>("Season")
                        .HasColumnType("integer");

                    b.Property<int?>("Seasontype")
                        .HasColumnType("integer");

                    b.Property<string>("Team")
                        .HasColumnType("text");

                    b.Property<int?>("TeamEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<string>("Thirddownattempts")
                        .HasColumnType("text");

                    b.Property<string>("Thirddownconversions")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Timeofpossessionminutes")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Timeofpossessionseconds")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Week")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_TeamGames_IsDeleted");

                    b.HasIndex("TeamEntityId");

                    b.ToTable("TeamGames", "cfb");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBTeamSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<string>("Conferencelosses")
                        .HasColumnType("text");

                    b.Property<string>("Conferencepointsagainst")
                        .HasColumnType("text");

                    b.Property<string>("Conferencepointsfor")
                        .HasColumnType("text");

                    b.Property<string>("Conferencewins")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExternalStatId")
                        .HasColumnType("integer");

                    b.Property<string>("Extrapointsattempted")
                        .HasColumnType("text");

                    b.Property<string>("Extrapointsmade")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypoints")
                        .HasColumnType("text");

                    b.Property<int?>("Fieldgoalpercentage")
                        .HasColumnType("integer");

                    b.Property<int?>("Fieldgoalsattempted")
                        .HasColumnType("integer");

                    b.Property<int?>("Fieldgoalslongestmade")
                        .HasColumnType("integer");

                    b.Property<int?>("Fieldgoalsmade")
                        .HasColumnType("integer");

                    b.Property<string>("Firstdowns")
                        .HasColumnType("text");

                    b.Property<string>("Fourthdownattempts")
                        .HasColumnType("text");

                    b.Property<string>("Fourthdownconversions")
                        .HasColumnType("text");

                    b.Property<int?>("Games")
                        .HasColumnType("integer");

                    b.Property<string>("Homelosses")
                        .HasColumnType("text");

                    b.Property<string>("Homewins")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Losses")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Opponentscore")
                        .HasColumnType("text");

                    b.Property<string>("Passingattempts")
                        .HasColumnType("text");

                    b.Property<string>("Passingcompletionpercentage")
                        .HasColumnType("text");

                    b.Property<string>("Passingcompletions")
                        .HasColumnType("text");

                    b.Property<string>("Passinginterceptions")
                        .HasColumnType("text");

                    b.Property<string>("Passingrating")
                        .HasColumnType("text");

                    b.Property<string>("Passingtouchdowns")
                        .HasColumnType("text");

                    b.Property<string>("Passingyards")
                        .HasColumnType("text");

                    b.Property<string>("Passingyardsperattempt")
                        .HasColumnType("text");

                    b.Property<string>("Passingyardspercompletion")
                        .HasColumnType("text");

                    b.Property<string>("Penalties")
                        .HasColumnType("text");

                    b.Property<string>("Penaltyyards")
                        .HasColumnType("text");

                    b.Property<int?>("Pointsagainst")
                        .HasColumnType("integer");

                    b.Property<int?>("Pointsfor")
                        .HasColumnType("integer");

                    b.Property<string>("Receivinglong")
                        .HasColumnType("text");

                    b.Property<string>("Receivingtouchdowns")
                        .HasColumnType("text");

                    b.Property<string>("Receivingyards")
                        .HasColumnType("text");

                    b.Property<string>("Receivingyardsperreception")
                        .HasColumnType("text");

                    b.Property<string>("Receptions")
                        .HasColumnType("text");

                    b.Property<string>("Roadlosses")
                        .HasColumnType("text");

                    b.Property<string>("Roadwins")
                        .HasColumnType("text");

                    b.Property<string>("Rushingattempts")
                        .HasColumnType("text");

                    b.Property<string>("Rushinglong")
                        .HasColumnType("text");

                    b.Property<string>("Rushingtouchdowns")
                        .HasColumnType("text");

                    b.Property<string>("Rushingyards")
                        .HasColumnType("text");

                    b.Property<string>("Rushingyardsperattempt")
                        .HasColumnType("text");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.Property<int?>("Season")
                        .HasColumnType("integer");

                    b.Property<int?>("Seasontype")
                        .HasColumnType("integer");

                    b.Property<string>("Streak")
                        .HasColumnType("text");

                    b.Property<string>("Team")
                        .HasColumnType("text");

                    b.Property<int?>("TeamEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<string>("Thirddownattempts")
                        .HasColumnType("text");

                    b.Property<string>("Thirddownconversions")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Timeofpossessionminutes")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Timeofpossessionseconds")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_TeamSeasons_IsDeleted");

                    b.HasIndex("TeamEntityId");

                    b.ToTable("TeamSeasons", "cfb");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBGame", b =>
                {
                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBTeam", "AwayTeam")
                        .WithMany("AwayGames")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBGame", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBTeam", "HomeTeam")
                        .WithMany("HomeGames")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBStadium", "StadiumEntity")
                        .WithMany()
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("Game");

                    b.Navigation("HomeTeam");

                    b.Navigation("StadiumEntity");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBPeriod", b =>
                {
                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBGame", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBPlayer", b =>
                {
                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBPlayer", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBTeam", "TeamEntity")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("TeamEntity");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBPlayerGame", b =>
                {
                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBPlayerGame", null)
                        .WithMany("PlayerStats")
                        .HasForeignKey("CFBPlayerGameId");

                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBTeamGame", null)
                        .WithMany("PlayerStats")
                        .HasForeignKey("CFBTeamGameId");

                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBGame", "Game")
                        .WithMany("PlayerStats")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBPlayer", "Player")
                        .WithMany("GameStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBTeam", "TeamEntity")
                        .WithMany()
                        .HasForeignKey("TeamEntityId");

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("TeamEntity");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBPlayerGameProjection", b =>
                {
                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBGame", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBPlayer", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBTeam", "TeamEntity")
                        .WithMany()
                        .HasForeignKey("TeamEntityId");

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("TeamEntity");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBPlayerSeason", b =>
                {
                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBPlayer", "Player")
                        .WithMany("SeasonStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBTeam", "TeamEntity")
                        .WithMany()
                        .HasForeignKey("TeamEntityId");

                    b.Navigation("Player");

                    b.Navigation("TeamEntity");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBStadium", b =>
                {
                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBStadium", "StadiumEntity")
                        .WithMany()
                        .HasForeignKey("StadiumEntityId");

                    b.Navigation("StadiumEntity");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBTeam", b =>
                {
                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBStadium", "StadiumEntity")
                        .WithMany()
                        .HasForeignKey("StadiumEntityId");

                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBTeam", "TeamEntity")
                        .WithMany()
                        .HasForeignKey("TeamEntityId");

                    b.Navigation("StadiumEntity");

                    b.Navigation("TeamEntity");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBTeamGame", b =>
                {
                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBGame", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBTeam", "TeamEntity")
                        .WithMany()
                        .HasForeignKey("TeamEntityId");

                    b.Navigation("Game");

                    b.Navigation("TeamEntity");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBTeamSeason", b =>
                {
                    b.HasOne("FantasySports.Core.Entities.CollegeFootball.CFBTeam", "TeamEntity")
                        .WithMany()
                        .HasForeignKey("TeamEntityId");

                    b.Navigation("TeamEntity");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBGame", b =>
                {
                    b.Navigation("PlayerStats");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBPlayer", b =>
                {
                    b.Navigation("GameStats");

                    b.Navigation("SeasonStats");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBPlayerGame", b =>
                {
                    b.Navigation("PlayerStats");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBTeam", b =>
                {
                    b.Navigation("AwayGames");

                    b.Navigation("HomeGames");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.CollegeFootball.CFBTeamGame", b =>
                {
                    b.Navigation("PlayerStats");
                });
#pragma warning restore 612, 618
        }
    }
}
