// <auto-generated />
using System;
using FantasySports.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FantasySports.Infrastructure.Data.Migrations.MLB
{
    [DbContext(typeof(MLBDbContext))]
    partial class MLBDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("mlb")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<int?>("AwayTeamId")
                        .HasColumnType("integer");

                    b.Property<string>("Awayrotationnumber")
                        .HasColumnType("text");

                    b.Property<string>("Awayteam")
                        .HasColumnType("text");

                    b.Property<string>("Awayteammoneyline")
                        .HasColumnType("text");

                    b.Property<string>("Awayteamopener")
                        .HasColumnType("text");

                    b.Property<string>("Awayteamprobablepitcherid")
                        .HasColumnType("text");

                    b.Property<string>("Awayteamruns")
                        .HasColumnType("text");

                    b.Property<string>("Awayteamstartingpitcher")
                        .HasColumnType("text");

                    b.Property<string>("Awayteamstartingpitcherid")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Day")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Forecastdescription")
                        .HasColumnType("text");

                    b.Property<string>("Forecasttemphigh")
                        .HasColumnType("text");

                    b.Property<string>("Forecasttemplow")
                        .HasColumnType("text");

                    b.Property<string>("Forecastwindchill")
                        .HasColumnType("text");

                    b.Property<string>("Forecastwinddirection")
                        .HasColumnType("text");

                    b.Property<string>("Forecastwindspeed")
                        .HasColumnType("text");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int?>("HomeTeamId")
                        .HasColumnType("integer");

                    b.Property<string>("Homerotationnumber")
                        .HasColumnType("text");

                    b.Property<string>("Hometeam")
                        .HasColumnType("text");

                    b.Property<string>("Hometeammoneyline")
                        .HasColumnType("text");

                    b.Property<string>("Hometeamopener")
                        .HasColumnType("text");

                    b.Property<string>("Hometeamprobablepitcherid")
                        .HasColumnType("text");

                    b.Property<string>("Hometeamruns")
                        .HasColumnType("text");

                    b.Property<string>("Hometeamstartingpitcher")
                        .HasColumnType("text");

                    b.Property<string>("Hometeamstartingpitcherid")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Neutralvenue")
                        .HasColumnType("text");

                    b.Property<decimal?>("Overpayout")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Overunder")
                        .HasColumnType("numeric");

                    b.Property<int?>("Pointspread")
                        .HasColumnType("integer");

                    b.Property<int?>("Season")
                        .HasColumnType("integer");

                    b.Property<int?>("SeasonType")
                        .HasColumnType("integer");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<decimal?>("Underpayout")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("GameId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Games_IsDeleted");

                    b.HasIndex("StadiumId");

                    b.ToTable("Games", "mlb");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBInning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<string>("Awayteamruns")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Hometeamruns")
                        .HasColumnType("text");

                    b.Property<int>("InningId")
                        .HasColumnType("integer");

                    b.Property<string>("Inningnumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Innings_IsDeleted");

                    b.ToTable("Innings", "mlb");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<string>("Bathand")
                        .HasColumnType("text");

                    b.Property<string>("Birthcity")
                        .HasColumnType("text");

                    b.Property<string>("Birthcountry")
                        .HasColumnType("text");

                    b.Property<string>("Birthdate")
                        .HasColumnType("text");

                    b.Property<string>("Birthstate")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DraftKingsPlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("Draftkingsname")
                        .HasColumnType("text");

                    b.Property<int>("FanDuelPlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("Fanduelname")
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .HasColumnType("text");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Injurystatus")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Jersey")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Lastname")
                        .HasColumnType("text");

                    b.Property<string>("Photourl")
                        .HasColumnType("text");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("Positioncategory")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Team")
                        .HasColumnType("text");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<string>("Throwhand")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Players_IsDeleted");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players", "mlb");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBPlayerGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<string>("Atbats")
                        .HasColumnType("text");

                    b.Property<string>("Battingaverage")
                        .HasColumnType("text");

                    b.Property<string>("Caughtstealing")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Day")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Doubles")
                        .HasColumnType("text");

                    b.Property<string>("Earnedrunaverage")
                        .HasColumnType("text");

                    b.Property<int>("ExternalStatId")
                        .HasColumnType("integer");

                    b.Property<string>("Fantasypoints")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointsbatting")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointsdraftkings")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointsfanduel")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointspitching")
                        .HasColumnType("text");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int?>("Games")
                        .HasColumnType("integer");

                    b.Property<string>("Groundintodoubleplay")
                        .HasColumnType("text");

                    b.Property<string>("Hitbypitch")
                        .HasColumnType("text");

                    b.Property<int?>("Hits")
                        .HasColumnType("integer");

                    b.Property<string>("Homeoraway")
                        .HasColumnType("text");

                    b.Property<string>("Homeruns")
                        .HasColumnType("text");

                    b.Property<string>("Injurystatus")
                        .HasColumnType("text");

                    b.Property<string>("Inningspitcheddecimal")
                        .HasColumnType("text");

                    b.Property<string>("Inningspitchedfull")
                        .HasColumnType("text");

                    b.Property<string>("Inningspitchedouts")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Losses")
                        .HasColumnType("integer");

                    b.Property<int?>("MLBPlayerGameId")
                        .HasColumnType("integer");

                    b.Property<int?>("MLBTeamGameId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Onbasepercentage")
                        .HasColumnType("text");

                    b.Property<string>("Onbaseplusslugging")
                        .HasColumnType("text");

                    b.Property<string>("Opponent")
                        .HasColumnType("text");

                    b.Property<int>("OpponentId")
                        .HasColumnType("integer");

                    b.Property<string>("Outs")
                        .HasColumnType("text");

                    b.Property<string>("Pitchesthrown")
                        .HasColumnType("text");

                    b.Property<string>("Pitchesthrownstrikes")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingbattingaverageagainst")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingcompletegames")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingearnedruns")
                        .HasColumnType("text");

                    b.Property<string>("Pitchinghits")
                        .HasColumnType("text");

                    b.Property<string>("Pitchinghomeruns")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingonbasepercentage")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingonbaseplusslugging")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingruns")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingshutouts")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingsluggingpercentage")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingstrikeouts")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingstrikeoutspernineinnings")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingwalks")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingwalkspernineinnings")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingweightedonbasepercentage")
                        .HasColumnType("text");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("Positioncategory")
                        .HasColumnType("text");

                    b.Property<int?>("Runs")
                        .HasColumnType("integer");

                    b.Property<int?>("Runsbattedin")
                        .HasColumnType("integer");

                    b.Property<string>("Sacrificeflies")
                        .HasColumnType("text");

                    b.Property<string>("Sacrifices")
                        .HasColumnType("text");

                    b.Property<int?>("Saves")
                        .HasColumnType("integer");

                    b.Property<int?>("Season")
                        .HasColumnType("integer");

                    b.Property<int?>("Seasontype")
                        .HasColumnType("integer");

                    b.Property<string>("Singles")
                        .HasColumnType("text");

                    b.Property<decimal?>("Sluggingpercentage")
                        .HasColumnType("numeric");

                    b.Property<bool?>("Started")
                        .HasColumnType("boolean");

                    b.Property<string>("Stolenbases")
                        .HasColumnType("text");

                    b.Property<string>("Strikeouts")
                        .HasColumnType("text");

                    b.Property<string>("Team")
                        .HasColumnType("text");

                    b.Property<int?>("TeamEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int?>("Totaloutspitched")
                        .HasColumnType("integer");

                    b.Property<string>("Triples")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Walks")
                        .HasColumnType("text");

                    b.Property<string>("Walkshitsperinningspitched")
                        .HasColumnType("text");

                    b.Property<decimal?>("Weightedonbasepercentage")
                        .HasColumnType("numeric");

                    b.Property<int?>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_PlayerGames_IsDeleted");

                    b.HasIndex("MLBPlayerGameId");

                    b.HasIndex("MLBTeamGameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamEntityId");

                    b.ToTable("PlayerGames", "mlb");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBPlayerGameProjection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<string>("Atbats")
                        .HasColumnType("text");

                    b.Property<string>("Battingaverage")
                        .HasColumnType("text");

                    b.Property<string>("Caughtstealing")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Day")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Doubles")
                        .HasColumnType("text");

                    b.Property<string>("Earnedrunaverage")
                        .HasColumnType("text");

                    b.Property<int>("ExternalStatId")
                        .HasColumnType("integer");

                    b.Property<string>("Fantasypoints")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointsbatting")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointsdraftkings")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointsfanduel")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointspitching")
                        .HasColumnType("text");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int?>("Games")
                        .HasColumnType("integer");

                    b.Property<string>("Groundintodoubleplay")
                        .HasColumnType("text");

                    b.Property<string>("Hitbypitch")
                        .HasColumnType("text");

                    b.Property<int?>("Hits")
                        .HasColumnType("integer");

                    b.Property<string>("Homeoraway")
                        .HasColumnType("text");

                    b.Property<string>("Homeruns")
                        .HasColumnType("text");

                    b.Property<string>("Injurystatus")
                        .HasColumnType("text");

                    b.Property<string>("Inningspitcheddecimal")
                        .HasColumnType("text");

                    b.Property<string>("Inningspitchedfull")
                        .HasColumnType("text");

                    b.Property<string>("Inningspitchedouts")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Losses")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Onbasepercentage")
                        .HasColumnType("text");

                    b.Property<string>("Onbaseplusslugging")
                        .HasColumnType("text");

                    b.Property<string>("Opponent")
                        .HasColumnType("text");

                    b.Property<int>("OpponentId")
                        .HasColumnType("integer");

                    b.Property<string>("Outs")
                        .HasColumnType("text");

                    b.Property<string>("Pitchesthrown")
                        .HasColumnType("text");

                    b.Property<string>("Pitchesthrownstrikes")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingbattingaverageagainst")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingcompletegames")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingearnedruns")
                        .HasColumnType("text");

                    b.Property<string>("Pitchinghits")
                        .HasColumnType("text");

                    b.Property<string>("Pitchinghomeruns")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingonbasepercentage")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingonbaseplusslugging")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingruns")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingshutouts")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingsluggingpercentage")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingstrikeouts")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingstrikeoutspernineinnings")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingwalks")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingwalkspernineinnings")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingweightedonbasepercentage")
                        .HasColumnType("text");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("Positioncategory")
                        .HasColumnType("text");

                    b.Property<int?>("Runs")
                        .HasColumnType("integer");

                    b.Property<int?>("Runsbattedin")
                        .HasColumnType("integer");

                    b.Property<string>("Sacrificeflies")
                        .HasColumnType("text");

                    b.Property<string>("Sacrifices")
                        .HasColumnType("text");

                    b.Property<int?>("Saves")
                        .HasColumnType("integer");

                    b.Property<int?>("Season")
                        .HasColumnType("integer");

                    b.Property<int?>("Seasontype")
                        .HasColumnType("integer");

                    b.Property<string>("Singles")
                        .HasColumnType("text");

                    b.Property<decimal?>("Sluggingpercentage")
                        .HasColumnType("numeric");

                    b.Property<bool?>("Started")
                        .HasColumnType("boolean");

                    b.Property<string>("Stolenbases")
                        .HasColumnType("text");

                    b.Property<string>("Strikeouts")
                        .HasColumnType("text");

                    b.Property<string>("Team")
                        .HasColumnType("text");

                    b.Property<int?>("TeamEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int?>("Totaloutspitched")
                        .HasColumnType("integer");

                    b.Property<string>("Triples")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Walks")
                        .HasColumnType("text");

                    b.Property<string>("Walkshitsperinningspitched")
                        .HasColumnType("text");

                    b.Property<decimal?>("Weightedonbasepercentage")
                        .HasColumnType("numeric");

                    b.Property<int?>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_PlayerGameProjections_IsDeleted");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamEntityId");

                    b.ToTable("PlayerGameProjections", "mlb");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBPlayerSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<string>("Atbats")
                        .HasColumnType("text");

                    b.Property<string>("Auctionvalue")
                        .HasColumnType("text");

                    b.Property<decimal?>("Averagedraftposition")
                        .HasColumnType("numeric");

                    b.Property<string>("Battingaverage")
                        .HasColumnType("text");

                    b.Property<string>("Caughtstealing")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Doubles")
                        .HasColumnType("text");

                    b.Property<string>("Earnedrunaverage")
                        .HasColumnType("text");

                    b.Property<int>("ExternalStatId")
                        .HasColumnType("integer");

                    b.Property<string>("Fantasypoints")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointsbatting")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointsdraftkings")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointsfanduel")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointspitching")
                        .HasColumnType("text");

                    b.Property<int?>("Games")
                        .HasColumnType("integer");

                    b.Property<string>("Groundintodoubleplay")
                        .HasColumnType("text");

                    b.Property<string>("Hitbypitch")
                        .HasColumnType("text");

                    b.Property<int?>("Hits")
                        .HasColumnType("integer");

                    b.Property<string>("Homeruns")
                        .HasColumnType("text");

                    b.Property<string>("Inningspitcheddecimal")
                        .HasColumnType("text");

                    b.Property<string>("Inningspitchedfull")
                        .HasColumnType("text");

                    b.Property<string>("Inningspitchedouts")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Losses")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Onbasepercentage")
                        .HasColumnType("text");

                    b.Property<string>("Onbaseplusslugging")
                        .HasColumnType("text");

                    b.Property<string>("Outs")
                        .HasColumnType("text");

                    b.Property<string>("Pitchesthrown")
                        .HasColumnType("text");

                    b.Property<string>("Pitchesthrownstrikes")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingbattingaverageagainst")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingcompletegames")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingearnedruns")
                        .HasColumnType("text");

                    b.Property<string>("Pitchinghits")
                        .HasColumnType("text");

                    b.Property<string>("Pitchinghomeruns")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingonbasepercentage")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingonbaseplusslugging")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingruns")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingshutouts")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingsluggingpercentage")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingstrikeouts")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingstrikeoutspernineinnings")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingwalks")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingwalkspernineinnings")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingweightedonbasepercentage")
                        .HasColumnType("text");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("Positioncategory")
                        .HasColumnType("text");

                    b.Property<int?>("Runs")
                        .HasColumnType("integer");

                    b.Property<int?>("Runsbattedin")
                        .HasColumnType("integer");

                    b.Property<string>("Sacrificeflies")
                        .HasColumnType("text");

                    b.Property<string>("Sacrifices")
                        .HasColumnType("text");

                    b.Property<int?>("Saves")
                        .HasColumnType("integer");

                    b.Property<int?>("Season")
                        .HasColumnType("integer");

                    b.Property<int?>("Seasontype")
                        .HasColumnType("integer");

                    b.Property<string>("Singles")
                        .HasColumnType("text");

                    b.Property<decimal?>("Sluggingpercentage")
                        .HasColumnType("numeric");

                    b.Property<bool?>("Started")
                        .HasColumnType("boolean");

                    b.Property<string>("Stolenbases")
                        .HasColumnType("text");

                    b.Property<string>("Strikeouts")
                        .HasColumnType("text");

                    b.Property<string>("Team")
                        .HasColumnType("text");

                    b.Property<int?>("TeamEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int?>("Totaloutspitched")
                        .HasColumnType("integer");

                    b.Property<string>("Triples")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Walks")
                        .HasColumnType("text");

                    b.Property<string>("Walkshitsperinningspitched")
                        .HasColumnType("text");

                    b.Property<decimal?>("Weightedonbasepercentage")
                        .HasColumnType("numeric");

                    b.Property<int?>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_PlayerSeasons_IsDeleted");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamEntityId");

                    b.ToTable("PlayerSeasons", "mlb");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBPlayerSeasonProjection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<string>("Atbats")
                        .HasColumnType("text");

                    b.Property<string>("Auctionvalue")
                        .HasColumnType("text");

                    b.Property<decimal?>("Averagedraftposition")
                        .HasColumnType("numeric");

                    b.Property<string>("Battingaverage")
                        .HasColumnType("text");

                    b.Property<string>("Caughtstealing")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Doubles")
                        .HasColumnType("text");

                    b.Property<string>("Earnedrunaverage")
                        .HasColumnType("text");

                    b.Property<int>("ExternalStatId")
                        .HasColumnType("integer");

                    b.Property<string>("Fantasypoints")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointsbatting")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointsdraftkings")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointsfanduel")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointspitching")
                        .HasColumnType("text");

                    b.Property<int?>("Games")
                        .HasColumnType("integer");

                    b.Property<string>("Groundintodoubleplay")
                        .HasColumnType("text");

                    b.Property<string>("Hitbypitch")
                        .HasColumnType("text");

                    b.Property<int?>("Hits")
                        .HasColumnType("integer");

                    b.Property<string>("Homeruns")
                        .HasColumnType("text");

                    b.Property<string>("Inningspitcheddecimal")
                        .HasColumnType("text");

                    b.Property<string>("Inningspitchedfull")
                        .HasColumnType("text");

                    b.Property<string>("Inningspitchedouts")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Losses")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Onbasepercentage")
                        .HasColumnType("text");

                    b.Property<string>("Onbaseplusslugging")
                        .HasColumnType("text");

                    b.Property<string>("Outs")
                        .HasColumnType("text");

                    b.Property<string>("Pitchesthrown")
                        .HasColumnType("text");

                    b.Property<string>("Pitchesthrownstrikes")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingbattingaverageagainst")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingcompletegames")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingearnedruns")
                        .HasColumnType("text");

                    b.Property<string>("Pitchinghits")
                        .HasColumnType("text");

                    b.Property<string>("Pitchinghomeruns")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingonbasepercentage")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingonbaseplusslugging")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingruns")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingshutouts")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingsluggingpercentage")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingstrikeouts")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingstrikeoutspernineinnings")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingwalks")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingwalkspernineinnings")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingweightedonbasepercentage")
                        .HasColumnType("text");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("Positioncategory")
                        .HasColumnType("text");

                    b.Property<int?>("Runs")
                        .HasColumnType("integer");

                    b.Property<int?>("Runsbattedin")
                        .HasColumnType("integer");

                    b.Property<string>("Sacrificeflies")
                        .HasColumnType("text");

                    b.Property<string>("Sacrifices")
                        .HasColumnType("text");

                    b.Property<int?>("Saves")
                        .HasColumnType("integer");

                    b.Property<int?>("Season")
                        .HasColumnType("integer");

                    b.Property<int?>("Seasontype")
                        .HasColumnType("integer");

                    b.Property<string>("Singles")
                        .HasColumnType("text");

                    b.Property<decimal?>("Sluggingpercentage")
                        .HasColumnType("numeric");

                    b.Property<bool?>("Started")
                        .HasColumnType("boolean");

                    b.Property<string>("Stolenbases")
                        .HasColumnType("text");

                    b.Property<string>("Strikeouts")
                        .HasColumnType("text");

                    b.Property<string>("Team")
                        .HasColumnType("text");

                    b.Property<int?>("TeamEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int?>("Totaloutspitched")
                        .HasColumnType("integer");

                    b.Property<string>("Triples")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Walks")
                        .HasColumnType("text");

                    b.Property<string>("Walkshitsperinningspitched")
                        .HasColumnType("text");

                    b.Property<decimal?>("Weightedonbasepercentage")
                        .HasColumnType("numeric");

                    b.Property<int?>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_PlayerSeasonProjections_IsDeleted");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamEntityId");

                    b.ToTable("PlayerSeasonProjections", "mlb");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBStadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<int?>("Altitude")
                        .HasColumnType("integer");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Centerfield")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<int?>("Country")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Geolat")
                        .HasColumnType("text");

                    b.Property<string>("Geolong")
                        .HasColumnType("text");

                    b.Property<string>("Homeplatedirection")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Leftcenterfield")
                        .HasColumnType("text");

                    b.Property<string>("Leftfield")
                        .HasColumnType("text");

                    b.Property<string>("Midleftcenterfield")
                        .HasColumnType("text");

                    b.Property<string>("Midleftfield")
                        .HasColumnType("text");

                    b.Property<string>("Midrightcenterfield")
                        .HasColumnType("text");

                    b.Property<string>("Midrightfield")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Rightcenterfield")
                        .HasColumnType("text");

                    b.Property<string>("Rightfield")
                        .HasColumnType("text");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("Surface")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Stadiums_IsDeleted");

                    b.HasIndex("StadiumId");

                    b.ToTable("Stadiums", "mlb");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Division")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("League")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Primarycolor")
                        .HasColumnType("text");

                    b.Property<string>("Quaternarycolor")
                        .HasColumnType("text");

                    b.Property<string>("Secondarycolor")
                        .HasColumnType("text");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer");

                    b.Property<int?>("TeamEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<string>("Tertiarycolor")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Wikipedialogourl")
                        .HasColumnType("text");

                    b.Property<string>("Wikipediawordmarkurl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Teams_IsDeleted");

                    b.HasIndex("StadiumId");

                    b.HasIndex("TeamEntityId");

                    b.ToTable("Teams", "mlb");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBTeamGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<string>("Atbats")
                        .HasColumnType("text");

                    b.Property<string>("Battingaverage")
                        .HasColumnType("text");

                    b.Property<string>("Caughtstealing")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Day")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Doubles")
                        .HasColumnType("text");

                    b.Property<string>("Earnedrunaverage")
                        .HasColumnType("text");

                    b.Property<int>("ExternalStatId")
                        .HasColumnType("integer");

                    b.Property<string>("Fantasypoints")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointsbatting")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointsdraftkings")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointsfanduel")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointspitching")
                        .HasColumnType("text");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int?>("Games")
                        .HasColumnType("integer");

                    b.Property<string>("Groundintodoubleplay")
                        .HasColumnType("text");

                    b.Property<string>("Hitbypitch")
                        .HasColumnType("text");

                    b.Property<int?>("Hits")
                        .HasColumnType("integer");

                    b.Property<string>("Homeoraway")
                        .HasColumnType("text");

                    b.Property<string>("Homeruns")
                        .HasColumnType("text");

                    b.Property<string>("Inningspitcheddecimal")
                        .HasColumnType("text");

                    b.Property<string>("Inningspitchedfull")
                        .HasColumnType("text");

                    b.Property<string>("Inningspitchedouts")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Losses")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Onbasepercentage")
                        .HasColumnType("text");

                    b.Property<string>("Onbaseplusslugging")
                        .HasColumnType("text");

                    b.Property<string>("Opponent")
                        .HasColumnType("text");

                    b.Property<int>("OpponentId")
                        .HasColumnType("integer");

                    b.Property<string>("Outs")
                        .HasColumnType("text");

                    b.Property<string>("Pitchesthrown")
                        .HasColumnType("text");

                    b.Property<string>("Pitchesthrownstrikes")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingbattingaverageagainst")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingcompletegames")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingearnedruns")
                        .HasColumnType("text");

                    b.Property<string>("Pitchinghits")
                        .HasColumnType("text");

                    b.Property<string>("Pitchinghomeruns")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingonbasepercentage")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingonbaseplusslugging")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingruns")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingshutouts")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingsluggingpercentage")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingstrikeouts")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingstrikeoutspernineinnings")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingwalks")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingwalkspernineinnings")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingweightedonbasepercentage")
                        .HasColumnType("text");

                    b.Property<int?>("Runs")
                        .HasColumnType("integer");

                    b.Property<int?>("Runsbattedin")
                        .HasColumnType("integer");

                    b.Property<string>("Sacrificeflies")
                        .HasColumnType("text");

                    b.Property<string>("Sacrifices")
                        .HasColumnType("text");

                    b.Property<int?>("Saves")
                        .HasColumnType("integer");

                    b.Property<int?>("Season")
                        .HasColumnType("integer");

                    b.Property<int?>("Seasontype")
                        .HasColumnType("integer");

                    b.Property<string>("Singles")
                        .HasColumnType("text");

                    b.Property<decimal?>("Sluggingpercentage")
                        .HasColumnType("numeric");

                    b.Property<string>("Stolenbases")
                        .HasColumnType("text");

                    b.Property<string>("Strikeouts")
                        .HasColumnType("text");

                    b.Property<string>("Team")
                        .HasColumnType("text");

                    b.Property<int?>("TeamEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int?>("Totaloutspitched")
                        .HasColumnType("integer");

                    b.Property<string>("Triples")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Walks")
                        .HasColumnType("text");

                    b.Property<string>("Walkshitsperinningspitched")
                        .HasColumnType("text");

                    b.Property<decimal?>("Weightedonbasepercentage")
                        .HasColumnType("numeric");

                    b.Property<int?>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_TeamGames_IsDeleted");

                    b.HasIndex("TeamEntityId");

                    b.ToTable("TeamGames", "mlb");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBTeamSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<string>("Atbats")
                        .HasColumnType("text");

                    b.Property<string>("Battingaverage")
                        .HasColumnType("text");

                    b.Property<string>("Caughtstealing")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Doubles")
                        .HasColumnType("text");

                    b.Property<string>("Earnedrunaverage")
                        .HasColumnType("text");

                    b.Property<int>("ExternalStatId")
                        .HasColumnType("integer");

                    b.Property<string>("Fantasypoints")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointsbatting")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointsdraftkings")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointsfanduel")
                        .HasColumnType("text");

                    b.Property<string>("Fantasypointspitching")
                        .HasColumnType("text");

                    b.Property<int?>("Games")
                        .HasColumnType("integer");

                    b.Property<string>("Groundintodoubleplay")
                        .HasColumnType("text");

                    b.Property<string>("Hitbypitch")
                        .HasColumnType("text");

                    b.Property<int?>("Hits")
                        .HasColumnType("integer");

                    b.Property<string>("Homeruns")
                        .HasColumnType("text");

                    b.Property<string>("Inningspitcheddecimal")
                        .HasColumnType("text");

                    b.Property<string>("Inningspitchedfull")
                        .HasColumnType("text");

                    b.Property<string>("Inningspitchedouts")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Losses")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Onbasepercentage")
                        .HasColumnType("text");

                    b.Property<string>("Onbaseplusslugging")
                        .HasColumnType("text");

                    b.Property<string>("Outs")
                        .HasColumnType("text");

                    b.Property<string>("Pitchesthrown")
                        .HasColumnType("text");

                    b.Property<string>("Pitchesthrownstrikes")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingbattingaverageagainst")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingcompletegames")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingearnedruns")
                        .HasColumnType("text");

                    b.Property<string>("Pitchinghits")
                        .HasColumnType("text");

                    b.Property<string>("Pitchinghomeruns")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingonbasepercentage")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingonbaseplusslugging")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingruns")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingshutouts")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingsluggingpercentage")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingstrikeouts")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingstrikeoutspernineinnings")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingwalks")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingwalkspernineinnings")
                        .HasColumnType("text");

                    b.Property<string>("Pitchingweightedonbasepercentage")
                        .HasColumnType("text");

                    b.Property<int?>("Runs")
                        .HasColumnType("integer");

                    b.Property<int?>("Runsbattedin")
                        .HasColumnType("integer");

                    b.Property<string>("Sacrificeflies")
                        .HasColumnType("text");

                    b.Property<string>("Sacrifices")
                        .HasColumnType("text");

                    b.Property<int?>("Saves")
                        .HasColumnType("integer");

                    b.Property<int?>("Season")
                        .HasColumnType("integer");

                    b.Property<int?>("Seasontype")
                        .HasColumnType("integer");

                    b.Property<string>("Singles")
                        .HasColumnType("text");

                    b.Property<decimal?>("Sluggingpercentage")
                        .HasColumnType("numeric");

                    b.Property<string>("Stolenbases")
                        .HasColumnType("text");

                    b.Property<string>("Strikeouts")
                        .HasColumnType("text");

                    b.Property<string>("Team")
                        .HasColumnType("text");

                    b.Property<int?>("TeamEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int?>("Totaloutspitched")
                        .HasColumnType("integer");

                    b.Property<string>("Triples")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Walks")
                        .HasColumnType("text");

                    b.Property<string>("Walkshitsperinningspitched")
                        .HasColumnType("text");

                    b.Property<decimal?>("Weightedonbasepercentage")
                        .HasColumnType("numeric");

                    b.Property<int?>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_TeamSeasons_IsDeleted");

                    b.HasIndex("TeamEntityId");

                    b.ToTable("TeamSeasons", "mlb");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBGame", b =>
                {
                    b.HasOne("FantasySports.Core.Entities.MLB.MLBTeam", "AwayTeamEntity")
                        .WithMany("AwayGames")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasySports.Core.Entities.MLB.MLBGame", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasySports.Core.Entities.MLB.MLBTeam", "HomeTeamEntity")
                        .WithMany("HomeGames")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasySports.Core.Entities.MLB.MLBStadium", "Stadium")
                        .WithMany()
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AwayTeamEntity");

                    b.Navigation("Game");

                    b.Navigation("HomeTeamEntity");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBInning", b =>
                {
                    b.HasOne("FantasySports.Core.Entities.MLB.MLBGame", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBPlayer", b =>
                {
                    b.HasOne("FantasySports.Core.Entities.MLB.MLBPlayer", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasySports.Core.Entities.MLB.MLBTeam", "TeamEntity")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("TeamEntity");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBPlayerGame", b =>
                {
                    b.HasOne("FantasySports.Core.Entities.MLB.MLBGame", "Game")
                        .WithMany("PlayerStats")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasySports.Core.Entities.MLB.MLBPlayerGame", null)
                        .WithMany("PlayerStats")
                        .HasForeignKey("MLBPlayerGameId");

                    b.HasOne("FantasySports.Core.Entities.MLB.MLBTeamGame", null)
                        .WithMany("PlayerStats")
                        .HasForeignKey("MLBTeamGameId");

                    b.HasOne("FantasySports.Core.Entities.MLB.MLBPlayer", "Player")
                        .WithMany("GameStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasySports.Core.Entities.MLB.MLBTeam", "TeamEntity")
                        .WithMany()
                        .HasForeignKey("TeamEntityId");

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("TeamEntity");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBPlayerGameProjection", b =>
                {
                    b.HasOne("FantasySports.Core.Entities.MLB.MLBGame", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasySports.Core.Entities.MLB.MLBPlayer", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasySports.Core.Entities.MLB.MLBTeam", "TeamEntity")
                        .WithMany()
                        .HasForeignKey("TeamEntityId");

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("TeamEntity");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBPlayerSeason", b =>
                {
                    b.HasOne("FantasySports.Core.Entities.MLB.MLBPlayer", "Player")
                        .WithMany("SeasonStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasySports.Core.Entities.MLB.MLBTeam", "TeamEntity")
                        .WithMany()
                        .HasForeignKey("TeamEntityId");

                    b.Navigation("Player");

                    b.Navigation("TeamEntity");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBPlayerSeasonProjection", b =>
                {
                    b.HasOne("FantasySports.Core.Entities.MLB.MLBPlayer", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasySports.Core.Entities.MLB.MLBTeam", "TeamEntity")
                        .WithMany()
                        .HasForeignKey("TeamEntityId");

                    b.Navigation("Player");

                    b.Navigation("TeamEntity");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBStadium", b =>
                {
                    b.HasOne("FantasySports.Core.Entities.MLB.MLBStadium", "Stadium")
                        .WithMany()
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBTeam", b =>
                {
                    b.HasOne("FantasySports.Core.Entities.MLB.MLBStadium", "Stadium")
                        .WithMany()
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasySports.Core.Entities.MLB.MLBTeam", "TeamEntity")
                        .WithMany()
                        .HasForeignKey("TeamEntityId");

                    b.Navigation("Stadium");

                    b.Navigation("TeamEntity");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBTeamGame", b =>
                {
                    b.HasOne("FantasySports.Core.Entities.MLB.MLBGame", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasySports.Core.Entities.MLB.MLBTeam", "TeamEntity")
                        .WithMany()
                        .HasForeignKey("TeamEntityId");

                    b.Navigation("Game");

                    b.Navigation("TeamEntity");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBTeamSeason", b =>
                {
                    b.HasOne("FantasySports.Core.Entities.MLB.MLBTeam", "TeamEntity")
                        .WithMany()
                        .HasForeignKey("TeamEntityId");

                    b.Navigation("TeamEntity");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBGame", b =>
                {
                    b.Navigation("PlayerStats");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBPlayer", b =>
                {
                    b.Navigation("GameStats");

                    b.Navigation("SeasonStats");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBPlayerGame", b =>
                {
                    b.Navigation("PlayerStats");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBTeam", b =>
                {
                    b.Navigation("AwayGames");

                    b.Navigation("HomeGames");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("FantasySports.Core.Entities.MLB.MLBTeamGame", b =>
                {
                    b.Navigation("PlayerStats");
                });
#pragma warning restore 612, 618
        }
    }
}
